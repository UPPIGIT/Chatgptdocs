import logging
from email_utility import EmailUtility
from google.cloud import bigquery

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class BigQueryUtility:
    def __init__(self):
        self.client = bigquery.Client()

    def execute_query(self, sql):
        logging.info(f'Executing BigQuery SQL: {sql}')
        query_job = self.client.query(sql)
        results = query_job.result()
        logging.info('Query executed successfully')
        return results

    def format_results_to_html_table(self, results, title):
        logging.info(f'Formatting results for table: {title}')
        html = f'<h2 style="color: #007ACC; font-size: 16px;">{title}</h2>'
        html += '<table style="border-collapse: collapse; width: auto; margin-bottom: 20px; border: 1px solid #ccc; font-size: 12px;">'
        html += '<tr style="background-color: #007ACC; color: white;">'

        # Table headers
        for field in results.schema:
            html += f'<th style="border: 1px solid #ccc; padding: 2px 4px; text-align: left;">{field.name}</th>'
        html += '</tr>'

        # Table rows
        for row in results:
            html += '<tr>'
            for field in results.schema:
                html += f'<td style="border: 1px solid #ccc; padding: 2px 4px; color: #555; line-height: 1.2;">{row[field.name]}</td>'
            html += '</tr>'
        
        html += '</table><br>'
        logging.info(f'Table {title} formatted successfully')
        return html

def send_bq_results_email():
    # Replace these with your actual OAuth2 details
    oauth2_url = "https://dummy-oauth2-server.example.com/token"
    client_id = "dummy-client-id"
    client_secret = "dummy-client-secret"
    scope = "Public NonPII"

    email_util = EmailUtility(oauth2_url, client_id, client_secret, scope)

    # Example: Sending an email with BigQuery results and DAG run stats
    dag_run_data = {
        "load_type": "Incremental",
        "run_date": "2024-08-08",
        "start_time": "2024-08-08, 22:00:11 EST",
        "end_time": "2024-08-08, 22:10:04 EST",
        "total_duration": "09 Min 53 sec",
    }

    queries = {
        "Input Source File Stats": "SELECT * FROM `dummy_project.dummy_dataset.dummy_table1`",
        "GCP Messages (logs)": "SELECT * FROM `dummy_project.dummy_dataset.dummy_table2`",
    }

    bigquery_util = BigQueryUtility()
    html_content = """
    <html>
    <body style="font-family: Arial, sans-serif; color: #333;">
        <p>Hi Team,</p>
        <p>Please find the below details of data load.</p>
        <h2 style="color: #007ACC; font-size: 16px;">Load Overview:</h2>
        <table style="border-collapse: collapse; width: auto; margin-bottom: 20px; border: 1px solid #ccc; font-size: 12px;">
            <tr style="background-color: #007ACC; color: white;">
                <th style="border: 1px solid #ccc; padding: 2px 4px; text-align: left;">Load Type</th>
                <th style="border: 1px solid #ccc; padding: 2px 4px; text-align: left;">Run Date</th>
                <th style="border: 1px solid #ccc; padding: 2px 4px; text-align: left;">Start Time</th>
                <th style="border: 1px solid #ccc; padding: 2px 4px; text-align: left;">End Time</th>
                <th style="border: 1px solid #ccc; padding: 2px 4px; text-align: left;">Total Duration</th>
            </tr>
            <tr>
                <td style="border: 1px solid #ccc; padding: 2px 4px; color: #555;">{load_type}</td>
                <td style="border: 1px solid #ccc; padding: 2px 4px; color: #555;">{run_date}</td>
                <td style="border: 1px solid #ccc; padding: 2px 4px; color: #555;">{start_time}</td>
                <td style="border: 1px solid #ccc; padding: 2px 4px; color: #555;">{end_time}</td>
                <td style="border: 1px solid #ccc; padding: 2px 4px; color: #555;">{total_duration}</td>
            </tr>
        </table><br>
    """.format(
        load_type=dag_run_data["load_type"],
        run_date=dag_run_data["run_date"],
        start_time=dag_run_data["start_time"],
        end_time=dag_run_data["end_time"],
        total_duration=dag_run_data["total_duration"],
    )

    for title, sql in queries.items():
        try:
            results = bigquery_util.execute_query(sql)
            html_content += bigquery_util.format_results_to_html_table(results, title)
        except Exception as e:
            logging.error(f'Error executing query for {title}: {e}')
            html_content += f'<p>Error executing query for {title}: {e}</p>'
    
    html_content += """
        <p>Please don't reply to this email. It is generated by GCP Composer DAG.</p>
    </body>
    </html>
    """

    email_util.send_email_via_api(
        subject="SBE GCP Data Load Stats - 08/08",
        to_email="recipient@example.com",
        cc_email="cc_recipient@example.com",
        email_content=html_content
    )

if __name__ == "__main__":
    send_bq_results_email()
  
